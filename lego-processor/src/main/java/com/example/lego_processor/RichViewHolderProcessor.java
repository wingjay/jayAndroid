package com.example.lego_processor;

import java.io.IOException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashSet;
import java.util.Set;

import javax.annotation.processing.AbstractProcessor;
import javax.annotation.processing.Filer;
import javax.annotation.processing.Messager;
import javax.annotation.processing.ProcessingEnvironment;
import javax.annotation.processing.Processor;
import javax.annotation.processing.RoundEnvironment;
import javax.lang.model.SourceVersion;
import javax.lang.model.element.Element;
import javax.lang.model.element.Modifier;
import javax.lang.model.element.TypeElement;
import javax.lang.model.util.ElementFilter;
import javax.tools.Diagnostic;

import com.example.lego_annotation.RichViewHolder;
import com.google.auto.service.AutoService;
import com.squareup.javapoet.ClassName;
import com.squareup.javapoet.JavaFile;
import com.squareup.javapoet.TypeSpec;

@AutoService(Processor.class)
public final class RichViewHolderProcessor extends AbstractProcessor {

    private Filer mFiler;
    private Messager mMessager;

    @Override
    public synchronized void init(ProcessingEnvironment processingEnvironment) {
        super.init(processingEnvironment);
        mFiler = processingEnvironment.getFiler();
        mMessager = processingEnvironment.getMessager();
    }

    @Override
    public boolean process(Set<? extends TypeElement> set, RoundEnvironment roundEnvironment) {
        Set<? extends Element> elements = roundEnvironment.getElementsAnnotatedWith(RichViewHolder.class);
        Set<? extends TypeElement> typeElements = ElementFilter.typesIn(elements);
        RichViewHolderElement targetElement = new RichViewHolderElement();

        for (TypeElement element : typeElements) {
            RichViewHolder richViewHolder = element.getAnnotation(RichViewHolder.class);
            String key = richViewHolder.key();
            ClassName currentType = ClassName.get(element);
            targetElement.addKeyClassName(key, currentType);
        }

        mMessager.printMessage(Diagnostic.Kind.NOTE,
            "generate RichViewHolder class:" + targetElement.getGeneratedClassName());

        DateFormat dateFormat = SimpleDateFormat.getDateInstance();
        TypeSpec targetTypeSpec = TypeSpec.classBuilder(targetElement.getGeneratedClassName())
            .addModifiers(Modifier.PUBLIC)
            .addSuperinterface(targetElement.superInterfaceName())
            .addMethod(targetElement.createMatchMethod())
            .addJavadoc("This file was generated by apt. Do not modify!\n\n")
            .addJavadoc("@date " + dateFormat.format(new Date()) + "\n")
            .addJavadoc("@author 冲灵 (yj142679@alibaba-inc.com)\n")
            .build();

        JavaFile javaFile = JavaFile.builder(targetElement.getPackageName(), targetTypeSpec)
            .addFileComment("This file was generated by apt. Do not modify!\n")
            .build();
        try {
            javaFile.writeTo(mFiler);
        } catch (IOException e) {
            //mMessager.printMessage(Diagnostic.Kind.ERROR, String.format("Generate file failed, reason: %s", e.getMessage()));
        }

        return true;
    }

    @Override
    public Set<String> getSupportedAnnotationTypes() {
        Set<String> set = new HashSet<>();
        set.add(RichViewHolder.class.getCanonicalName());
        return set;
    }

    @Override
    public SourceVersion getSupportedSourceVersion() {
        return SourceVersion.latestSupported();
    }
}
